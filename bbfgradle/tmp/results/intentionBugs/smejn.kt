// COMPILE != OK. Modified in 398
// MODIFIED by Convert lambda expression to anonymous function intention:
// ORIGINAL CODE:
// // Auto-generated by GenerateSteppedRangesCodegenTestData. Do not edit!
// // DONT_TARGET_EXACT_BACKEND: WASM
// // KJS_WITH_FULL_RUNTIME
// // WITH_RUNTIME
// import kotlin.test.*
// 
// tailrec fun box(): String {
//     assertFailsWith<IllegalArgumentException> {
//         val intProgression = 1 until 8
//         for (i in intProgression step 2 step 0) {
//         }
//     }
// 
//     assertFailsWith<IllegalArgumentException> {
//         val longProgression = 1L until 8L
//         for (i in longProgression step 2L step 0L) {
//         }
//     }
// 
//     assertFailsWith<IllegalArgumentException> {
//         val charProgression = 'a' until 'h'
//         for (i in charProgression step 2 step 0) {
//         }
//     }
// 
//     return "OK"
// }

// Auto-generated by GenerateSteppedRangesCodegenTestData. Do not edit!
// DONT_TARGET_EXACT_BACKEND: WASM
// KJS_WITH_FULL_RUNTIME
// WITH_RUNTIME
import kotlin.test.*

tailrec fun box(): String {
    assertFailsWith<IllegalArgumentException> {
        val intProgression = 1 until 8
        for (i in intProgression step 2 step 0) {
        }
    }

    assertFailsWith<IllegalArgumentException>(fun() {
    val longProgression = 1L until 8L
    for (i in longProgression step 2L step 0L) {
    }
})

    assertFailsWith<IllegalArgumentException> {
        val charProgression = 'a' until 'h'
        for (i in charProgression step 2 step 0) {
        }
    }

    return "OK"
}
